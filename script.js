// script.js
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    OWNER_KEY: "MASTER_KEY_123",
    LOG_STORAGE_KEY: "script_protector_logs"
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Script ID
function generateScriptId() {
    return 'SCR-' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5).toUpperCase();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('createBtn').addEventListener('click', createProtectedScript);
    document.getElementById('copyBtn').addEventListener('click', copyLink);
    document.getElementById('loginBtn').addEventListener('click', loginAsOwner);
    document.getElementById('clearLogs').addEventListener('click', clearLogs);

    const savedKey = sessionStorage.getItem('owner_key');
    if (savedKey && Logger.authenticateOwner(savedKey)) {
        showOwnerDashboard();
    }
});

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–æ–≤ (–†–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤)
const Logger = {
    log: function(type, message, scriptId = null) {
        const logEntry = {
            id: Date.now() + Math.random(),
            timestamp: new Date().toISOString(),
            type, // 'creation', 'owner_login', 'view', 'attempted_breach'
            message,
            scriptId,
            userAgent: navigator.userAgent
        };
        const logs = this.getLogs();
        logs.push(logEntry);
        localStorage.setItem(CONFIG.LOG_STORAGE_KEY, JSON.stringify(logs));
        this.updateDashboard();
    },
    getLogs: function() {
        return JSON.parse(localStorage.getItem(CONFIG.LOG_STORAGE_KEY) || '[]');
    },
    clearLogs: function() {
        localStorage.removeItem(CONFIG.LOG_STORAGE_KEY);
        this.updateDashboard();
    },
    updateDashboard: function() {
        if (!document.getElementById('totalAccess')) return;
        const logs = this.getLogs();
        document.getElementById('totalAccess').textContent = logs.length;
        document.getElementById('createdScripts').textContent = logs.filter(log => log.type === 'creation').length;
        document.getElementById('ownerLogins').textContent = logs.filter(log => log.type === 'owner_login').length;
        document.getElementById('breachAttempts').textContent = logs.filter(log => log.type === 'attempted_breach').length;
        this.displayLogs();
    },
    displayLogs: function() {
        if (!document.getElementById('accessLogs')) return;
        const logs = this.getLogs();
        const container = document.getElementById('accessLogs');
        container.innerHTML = '';
        logs.slice().reverse().forEach(log => {
            const logElement = document.createElement('div');
            let typeClass;
            if (log.type === 'creation') typeClass = 'success';
            else if (log.type === 'owner_login') typeClass = 'owner';
            else if (log.type === 'attempted_breach') typeClass = 'breach';
            else typeClass = ''; // –î–ª—è 'view'

            logElement.className = `log-entry ${typeClass}`;
            const time = new Date(log.timestamp).toLocaleString();
            logElement.innerHTML = `<strong>[${time}]</strong> [${log.type.toUpperCase()}] ${log.message}${log.scriptId ? `<br><small>Script ID: ${log.scriptId}</small>` : ''}`;
            container.appendChild(logElement);
        });
    },
    authenticateOwner: function(key) {
        return key === CONFIG.OWNER_KEY;
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function loginAsOwner() {
    const key = document.getElementById('ownerKey').value;
    if (Logger.authenticateOwner(key)) {
        sessionStorage.setItem('owner_key', key);
        showOwnerDashboard();
        Logger.log('owner_login', '–î–æ—Å—Ç—É–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
        alert('‚úÖ –î–æ—Å—Ç—É–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!');
    } else {
        alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –≤–ª–∞–¥–µ–ª—å—Ü–∞!');
    }
}

function showOwnerDashboard() {
    document.getElementById('ownerDashboard').classList.remove('hidden');
    Logger.updateDashboard();
}

function clearLogs() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?')) {
        Logger.clearLogs();
        alert('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!');
    }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function createProtectedScript() {
    const scriptUrl = document.getElementById('scriptUrl').value;
    const protectionLevel = document.getElementById('protectionLevel').value;
    if (!scriptUrl) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Å–∫—Ä–∏–ø—Ç–∞');
        return;
    }
    const btn = document.getElementById('createBtn');
    btn.textContent = 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞...';
    btn.disabled = true;
    try {
        const response = await fetch(`https://api.allorigins.win/raw?url=${encodeURIComponent(scriptUrl)}`);
        if (!response.ok) throw new Error(`Failed to fetch script. Status: ${response.status}`);
        const originalScript = await response.text();
        
        const scriptId = generateScriptId(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        
        // –ü–µ—Ä–µ–¥–∞–µ–º scriptId –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –µ–≥–æ –≤ URL
        const protectedScript = applyProtection(originalScript, protectionLevel, scriptId); 
        const protectedUrl = createProtectedUrl(protectedScript, protectionLevel, scriptId);
        
        document.getElementById('protectedLink').value = protectedUrl;
        document.getElementById('result').classList.remove('hidden');
        Logger.log('creation', `–°–æ–∑–¥–∞–Ω –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: ${scriptUrl}`, scriptId);
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: ' + error.message);
    } finally {
        btn.textContent = 'üöÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç';
        btn.disabled = false;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: applyProtection —Å —Ñ–∏–∫—Å–æ–º btoa –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Script ID
function applyProtection(script, level, scriptId) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º btoa(unescape(encodeURIComponent(...))) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UTF-8
    
    switch (level) {
        case 'basic':
            return btoa(unescape(encodeURIComponent(script)));
        case 'advanced':
            let advancedObfuscated = '';
            for (let i = 0; i < script.length; i++) {
                advancedObfuscated += String.fromCharCode(script.charCodeAt(i) ^ 0x42);
            }
            // –î–æ–±–∞–≤–ª—è–µ–º Script ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª–æ–∞–¥–µ—Ä–µ
            return btoa(unescape(encodeURIComponent(advancedObfuscated))) + '::' + btoa(scriptId);
        case 'military':
            let militaryObfuscated = '';
            const key = 'MILITARY_GRADE_PROTECTION_KEY_2024';
            for (let i = 0; i < script.length; i++) {
                militaryObfuscated += String.fromCharCode(script.charCodeAt(i) ^ key.charCodeAt(i % key.length));
            }
            // –î–æ–±–∞–≤–ª—è–µ–º Script ID –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
            return btoa(unescape(encodeURIComponent(militaryObfuscated))) + '::' + btoa(scriptId) + '::' + btoa(Date.now().toString());
        default:
            return script;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: createProtectedUrl —Å —Ñ–∏–∫—Å–æ–º btoa –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π Script ID
function createProtectedUrl(script, level, scriptId) {
    const escapedScript = script.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(/`/g, "\\`");
    // –ü–µ—Ä–µ–¥–∞–µ–º scriptId –≤ –ª–æ–∞–¥–µ—Ä
    const htmlContent = createLoaderHtml(escapedScript, level, scriptId); 
    // –ö–æ–¥–∏—Ä—É–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (—Ñ–∏–∫—Å–æ–º btoa)
    return 'data:text/html;base64,' + btoa(unescape(encodeURIComponent(htmlContent)));
}

function copyLink() {
    const linkInput = document.getElementById('protectedLink');
    linkInput.select();
    linkInput.setSelectionRange(0, 99999);
    navigator.clipboard.writeText(linkInput.value).then(() => {
        alert('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }, (err) => {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ' + err);
    });
}
