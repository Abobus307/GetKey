// loader.js

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JS-–∫–æ–¥ –¥–ª—è –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤ –ª–æ–∞–¥–µ—Ä
function getDecryptionCode(level) {
    switch(level) {
        case 'basic':
            // protectedScript ‚Äî —ç—Ç–æ base64 —Å—Ç—Ä–æ–∫–∏ (utf8-safe), –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            return `originalScript = decodeURIComponent(escape(atob(protectedScript)));`;
        case 'advanced':
            return `
                const parts = protectedScript.split('::');
                let decoded;
                try {
                    decoded = decodeURIComponent(escape(atob(parts[0]))); 
                } catch (e) {
                    throw new Error("Base64/UTF-8 decode failed: " + e.message);
                }
                
                originalScript = '';
                for (let i = 0; i < decoded.length; i++) {
                    originalScript += String.fromCharCode(decoded.charCodeAt(i) ^ 0x42);
                }
            `;
        case 'military':
            return `
                const parts = protectedScript.split('::');
                let decoded;
                try {
                    decoded = decodeURIComponent(escape(atob(parts[0]))); 
                } catch (e) {
                    throw new Error("Base64/UTF-8 decode failed: " + e.message);
                }

                const key = 'MILITARY_GRADE_PROTECTION_KEY_2024';
                originalScript = '';
                for (let i = 0; i < decoded.length; i++) {
                    originalScript += String.fromCharCode(
                        decoded.charCodeAt(i) ^ key.charCodeAt(i % key.length)
                    );
                }
            `;
        default:
            return 'originalScript = atob(protectedScript);';
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ base64 –¥–ª—è Unicode (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ data URL)
function base64EncodeUnicode(str) {
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: encodeURIComponent -> btoa(unescape(...)) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤.
    return btoa(unescape(encodeURIComponent(str)));
}

// createLoaderHtml ‚Äî —Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç protectedScript —á–µ—Ä–µ–∑ JSON.stringify
// protectedScript: —Å—Ç—Ä–æ–∫–∞ (base64 –∏–ª–∏ base64::meta), level: 'basic'|'advanced'|'military', scriptId: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id, bypassKey: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
function createLoaderHtml(protectedScript, level, scriptId, bypassKey = '') {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º protectedScript –≤ JSON-–ª–∏—Ç–µ—Ä–∞–ª ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ª—é–±–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫–∞–≤—ã—á–∫–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã, —é–Ω–∏–∫–æ–¥)
    const protectedScriptJsLiteral = JSON.stringify(protectedScript);
    const sanitizedBypassKey = String(bypassKey || '');

    // –õ–æ–≥–∏–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∫ –ª–∏—Ç–µ—Ä–∞–ª—ã —Ç–æ–∂–µ
    const loggingFunction = `
        const SCRIPT_ID = ${JSON.stringify(String(scriptId || ''))};
        const PROTECTION_LEVEL = ${JSON.stringify(String(level || 'basic'))};
        const MASTER_KEY = ${JSON.stringify('MASTER_KEY_123')};
        const BYPASS_KEY = ${JSON.stringify(sanitizedBypassKey)};

        function sendLog(type, details = {}) {
            try {
                var t = (type && typeof type.toUpperCase === 'function') ? type.toUpperCase() : String(type);
                console.warn('[LOGGING: ' + t + '] SCRIPT_ID: ' + SCRIPT_ID);
            } catch (e) {
                console.warn('[LOGGING: ERROR] SCRIPT_ID: ' + SCRIPT_ID, e);
            }
            console.log("Log Details:", details);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å fetch –∫ –±—ç–∫–µ–Ω–¥—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ
        sendLog('view', { status: 'Page loaded', level: PROTECTION_LEVEL, userAgent: navigator.userAgent });
        
        // protectedScript –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ –∫–∞–∫ JS-—Å—Ç—Ä–æ–∫–∞
        ` + `
        // —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–æ–π –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –¥–∞–ª–µ–µ
    `;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const decryptionCode = getDecryptionCode(level);

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π HTML –ª–æ–∞–¥–µ—Ä–∞ ‚Äî —Å meta charset –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ACCESS DENIED</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background: #000; color: #ff0000; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; min-height: 100vh; flex-direction: column; }
        .skull { font-size: 80px; margin-bottom: 10px; color: #ff0000; text-shadow: 0 0 10px #ff0000; }
        .container { max-width: 720px; width: 92%; text-align: center; padding: 20px; box-sizing: border-box; }
        h1 { color: #ff0000; text-shadow: 0 0 5px #ff0000; font-size: 30px; margin-bottom: 10px; }
        .alert-box { background: rgba(255, 0, 0, 0.08); border: 1px solid #ff0000; padding: 12px; margin-bottom: 14px; border-radius: 6px; }
        .feature-box { background: #1a1a1a; border: 1px solid #444; padding: 8px; margin: 6px; display: inline-block; width: 44%; border-radius: 4px; font-size: 12px; color: #bbb; vertical-align: top; }
        .log-console { background: #0a0a0a; border: 1px solid #333; padding: 12px; margin-top: 16px; text-align: left; font-family: 'Courier New', monospace; font-size: 13px; color: #00ff00; max-height: 120px; overflow:auto; }
        .input-group { margin: 18px 0; }
        #ownerKeyInput, #bypassInput { padding: 10px; background: #000; border: 1px solid #ff0000; color: #ff0000; width: 220px; text-align: center; border-radius:4px; }
        #ownerSubmit, #bypassSubmit, #copyLuaBtn { padding: 8px 12px; background: #ff0000; color: #000; border: none; cursor: pointer; margin-left: 8px; font-weight: bold; border-radius: 4px; }
        .hidden { display: none; }
        #luaCodeOutput { width: 100%; box-sizing: border-box; height: 300px; background: #111; color: #00ff00; border: 1px solid #00ff00; margin-top: 10px; resize: vertical; padding:8px; }
        .small { font-size:12px; color:#aaa; margin-top:8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="skull">‚ò†Ô∏è</div>

        <div id="accessDenied">
            <h1>ACCESS DENIED</h1>

            <div class="alert-box">
                <p><strong>‚ö†Ô∏è SECURITY BREACH DETECTED ‚ö†Ô∏è</strong></p>
                <p>Unauthorized browser access attempted</p>
                <p>This incident has been logged with your digital fingerprint</p>
            </div>

            <div style="display:flex; justify-content:space-between; flex-wrap:wrap; gap:8px;">
                <div class="feature-box">üîí Military Encryption</div>
                <div class="feature-box">üëÅÔ∏è You Are Being Monitored</div>
                <div class="feature-box">‚ö° Auto-Defense</div>
                <div class="feature-box">üçØ Honeypot System</div>
            </div>

            <div class="log-console">
                [SYSTEM] Scanning threat level...<br>
                [ALERT] Browser fingerprint logged<br>
                [ACTION] Deploying countermeasures...<br>
                [STATUS] <span id="errorStatus">Access permanently denied</span>
            </div>

            <div class="input-group">
                <input type="password" id="ownerKeyInput" placeholder="Owner MASTER key">
                <button id="ownerSubmit">Enter</button>
            </div>

            <div id="bypassGroup" class="input-group hidden">
                <input type="password" id="bypassInput" placeholder="Secondary bypass key">
                <button id="bypassSubmit">Submit</button>
                <div class="small">Secondary key ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å—Å—ã–ª–∫—É (required for stronger protection).</div>
            </div>

            <div class="small" style="margin-top:14px; color:#666;">Error Code: 403 ‚Äî You Cannot Access This Page</div>
        </div>

        <div id="ownerAccess" class="hidden">
            <h2>‚úÖ Decrypting Script...</h2>
            <textarea id="luaCodeOutput" readonly></textarea>
            <div style="margin-top:10px; text-align:right;"><button id="copyLuaBtn">Copy Lua Code</button></div>
        </div>
    </div>

    <script>
        ${loggingFunction}

        // –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª—è–µ–º protectedScript –∫–∞–∫ JS-—Å—Ç—Ä–æ–∫—É
        const protectedScript = ${protectedScriptJsLiteral};

        // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        function showDecryptedCodeImmediate() {
            let originalScript = '';
            try {
                ${decryptionCode}
                const out = document.getElementById('luaCodeOutput');
                if (out) out.value = originalScript;
            } catch (e) {
                const out = document.getElementById('luaCodeOutput');
                if (out) out.value = "Error decrypting script: " + e.message;
                sendLog('breach_failed', { error: e.message });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–¥–≤—É—Ö—à–∞–≥–æ–≤—ã–µ)
        function checkOwnerAccessStep1() {
            const inputEl = document.getElementById('ownerKeyInput');
            const input = inputEl ? inputEl.value : '';
            if (input === MASTER_KEY) {
                sendLog('owner_key_ok', { success: true });
                if (BYPASS_KEY && BYPASS_KEY.length > 0) {
                    // –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤–≤–æ–¥
                    const bg = document.getElementById('bypassGroup');
                    if (bg) bg.classList.remove('hidden');
                    const as = document.getElementById('accessDenied');
                    if (as) as.classList.add('hidden');
                } else {
                    // –Ω–µ—Ç BYPASS_KEY ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                    const denied = document.getElementById('accessDenied');
                    const owner = document.getElementById('ownerAccess');
                    if (denied) denied.classList.add('hidden');
                    if (owner) owner.classList.remove('hidden');
                    showDecryptedCodeImmediate();
                    sendLog('owner_access', { success: true, bypass: false });
                }
            } else {
                sendLog('attempted_breach', { success: false, key_tried: (input || '').substring(0,10) + '...' });
                const err = document.getElementById('errorStatus');
                if (err) err.textContent = 'Access key is invalid! Logging breach attempt...';
            }
        }

        function checkBypassKey() {
            const inEl = document.getElementById('bypassInput');
            const val = inEl ? inEl.value : '';
            if (!BYPASS_KEY || BYPASS_KEY.length === 0) {
                // –∑–∞—â–∏—Ç–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                const denied = document.getElementById('accessDenied');
                const owner = document.getElementById('ownerAccess');
                if (denied) denied.classList.add('hidden');
                if (owner) owner.classList.remove('hidden');
                showDecryptedCodeImmediate();
                sendLog('owner_access', { success: true, bypass: false });
                return;
            }
            if (val === BYPASS_KEY) {
                const denied = document.getElementById('accessDenied');
                const owner = document.getElementById('ownerAccess');
                const bg = document.getElementById('bypassGroup');
                if (bg) bg.classList.add('hidden');
                if (denied) denied.classList.add('hidden');
                if (owner) owner.classList.remove('hidden');
                showDecryptedCodeImmediate();
                sendLog('owner_access', { success: true, bypass: true });
            } else {
                sendLog('attempted_breach', { success: false, bypass_key_tried: (val || '').substring(0,10) + '...' });
                const err = document.getElementById('errorStatus');
                if (err) err.textContent = 'Bypass key invalid! Logging attempt...';
            }
        }

        (function(){
            const ownerSubmit = document.getElementById('ownerSubmit');
            if (ownerSubmit) ownerSubmit.addEventListener('click', checkOwnerAccessStep1);
            const ownerInput = document.getElementById('ownerKeyInput');
            if (ownerInput) ownerInput.addEventListener('keyup', function(e){ if (e.key === 'Enter') checkOwnerAccessStep1(); });

            const bypassSubmit = document.getElementById('bypassSubmit');
            if (bypassSubmit) bypassSubmit.addEventListener('click', checkBypassKey);
            const bypassInput = document.getElementById('bypassInput');
            if (bypassInput) bypassInput.addEventListener('keyup', function(e){ if (e.key === 'Enter') checkBypassKey(); });

            const copyBtn = document.getElementById('copyLuaBtn');
            if (copyBtn) copyBtn.addEventListener('click', function(){
                const out = document.getElementById('luaCodeOutput');
                if (!out) return;
                out.select();
                try {
                    navigator.clipboard.writeText(out.value).then(function(){ alert('Lua code copied to clipboard!'); }, function(err){ alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: ' + err); });
                } catch (e) {
                    try { document.execCommand('copy'); alert('Lua code copied (fallback)'); } catch(e) {}
                }
            });
        })();
    </script>
</body>
</html>
`;

    return html;
}

// –°–æ–∑–¥–∞—ë–º data URL –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ª–æ–∞–¥–µ—Ä–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º charset=utf-8 –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é base64-–∫–æ–¥–∏—Ä–æ–≤–∫—É
function createLoaderDataUrl(protectedScript, level, scriptId, bypassKey = '') {
    const html = createLoaderHtml(protectedScript, level, scriptId, bypassKey);
    return 'data:text/html;charset=utf-8;base64,' + base64EncodeUnicode(html);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏–º script.js (–µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { createLoaderHtml, createLoaderDataUrl, getDecryptionCode };
}
